%%
headers
#include <Python.h>
#include "pygobject.h"
#include "spice-widget.h"
#include "spice-channel-enums.h"
%%
modulename spice_client_gtk
%%
import gobject.GObject as PyGObject_Type
import gtk.DrawingArea as PyGtkDrawingArea_Type
import gtk.Widget as PyGtkWidget_Type
%%
ignore-glob
  *_get_type
%%
%%
override spice_display_get_grab_keys kwargs
static PyObject*
_wrap_spice_display_get_grab_keys(PyGObject *self,
                            PyObject *args, PyObject *kwargs)
{
    VncGrabSequence *seq;
    PyObject *keyList;
    int i;

    seq = spice_display_get_grab_keys(SPICE_DISPLAY(self->obj));

    keyList = PyList_New(0);
    for (i = 0 ; i < seq->nkeysyms ; i++)
       PyList_Append(keyList, PyInt_FromLong(seq->keysyms[i]));

    return keyList;
}
%%
override spice_display_set_grab_keys kwargs
static PyObject*
_wrap_spice_display_set_grab_keys(PyGObject *self,
                            PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = {"keys", NULL};
    PyObject *keyList;
    int i;
    guint nkeysyms;
    guint *keysyms;
    VncGrabSequence *seq;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "O|I:SpiceDisplay.set_grab_keys", kwlist,
                                     &keyList))
        return NULL;

    if (!PyList_Check(keyList))
        return NULL;

    nkeysyms = PyList_Size(keyList);
    keysyms = g_new0(guint, nkeysyms);

    for (i = 0 ; i < nkeysyms ; i++) {
        PyObject *val = PyList_GetItem(keyList, i);
        keysyms[i] = (guint)PyInt_AsLong(val);
    }

    seq = vnc_grab_sequence_new(nkeysyms, keysyms);
    g_free(keysyms);

    spice_display_set_grab_keys(SPICE_DISPLAY(self->obj), seq);

    vnc_grab_sequence_free(seq);

    Py_INCREF(Py_None);
    return Py_None;
}
