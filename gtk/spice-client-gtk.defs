;; -*- scheme -*-
; object definitions ...
(define-object Channel
  (in-module "Spice")
  (parent "GObject")
  (c-name "SpiceChannel")
  (gtype-id "SPICE_TYPE_CHANNEL")
)

(define-object CursorChannel
  (in-module "Spice")
  (parent "SpiceChannel")
  (c-name "SpiceCursorChannel")
  (gtype-id "SPICE_TYPE_CURSOR_CHANNEL")
)

(define-object Display
  (in-module "Spice")
  (parent "GtkDrawingArea")
  (c-name "SpiceDisplay")
  (gtype-id "SPICE_TYPE_DISPLAY")
)

(define-object DisplayChannel
  (in-module "Spice")
  (parent "SpiceChannel")
  (c-name "SpiceDisplayChannel")
  (gtype-id "SPICE_TYPE_DISPLAY_CHANNEL")
)

(define-object InputsChannel
  (in-module "Spice")
  (parent "SpiceChannel")
  (c-name "SpiceInputsChannel")
  (gtype-id "SPICE_TYPE_INPUTS_CHANNEL")
)

(define-object MainChannel
  (in-module "Spice")
  (parent "SpiceChannel")
  (c-name "SpiceMainChannel")
  (gtype-id "SPICE_TYPE_MAIN_CHANNEL")
)

(define-object PlaybackChannel
  (in-module "Spice")
  (parent "SpiceChannel")
  (c-name "SpicePlaybackChannel")
  (gtype-id "SPICE_TYPE_PLAYBACK_CHANNEL")
)

(define-object RecordChannel
  (in-module "Spice")
  (parent "SpiceChannel")
  (c-name "SpiceRecordChannel")
  (gtype-id "SPICE_TYPE_RECORD_CHANNEL")
)

(define-object Session
  (in-module "Spice")
  (parent "GObject")
  (c-name "SpiceSession")
  (gtype-id "SPICE_TYPE_SESSION")
)

;; Enumerations and flags ...

(define-enum DisplayKeyEvent
  (in-module "Spice")
  (c-name "SpiceDisplayKeyEvent")
  (gtype-id "SPICE_TYPE_DISPLAY_KEY_EVENT")
  (values
    '("press" "SPICE_DISPLAY_KEY_EVENT_PRESS")
    '("release" "SPICE_DISPLAY_KEY_EVENT_RELEASE")
    '("click" "SPICE_DISPLAY_KEY_EVENT_CLICK")
  )
)

(define-enum ChannelEvent
  (in-module "Spice")
  (c-name "SpiceChannelEvent")
  (gtype-id "SPICE_TYPE_CHANNEL_EVENT")
  (values
    '("none" "SPICE_CHANNEL_NONE")
    '("opened" "SPICE_CHANNEL_OPENED")
    '("closed" "SPICE_CHANNEL_CLOSED")
    '("error-connect" "SPICE_CHANNEL_ERROR_CONNECT")
    '("error-tls" "SPICE_CHANNEL_ERROR_TLS")
    '("error-link" "SPICE_CHANNEL_ERROR_LINK")
    '("error-auth" "SPICE_CHANNEL_ERROR_AUTH")
    '("error-io" "SPICE_CHANNEL_ERROR_IO")
  )
)


;; From spice-widget.h

(define-function spice_display_get_type
  (c-name "spice_display_get_type")
  (return-type "GType")
)

(define-function spice_display_new
  (c-name "spice_display_new")
  (is-constructor-of "SpiceDisplay")
  (return-type "SpiceDisplay*")
  (parameters
    '("SpiceSession*" "session")
    '("int" "id")
  )
)

(define-method mouse_ungrab
  (of-object "SpiceDisplay")
  (c-name "spice_display_mouse_ungrab")
  (return-type "none")
)

(define-method copy_to_guest
  (of-object "SpiceDisplay")
  (c-name "spice_display_copy_to_guest")
  (return-type "none")
)

(define-method paste_from_guest
  (of-object "SpiceDisplay")
  (c-name "spice_display_paste_from_guest")
  (return-type "none")
)

(define-method set_grab_keys
  (of-object "SpiceDisplay")
  (c-name "spice_display_set_grab_keys")
  (return-type "none")
  (parameters
    '("VncGrabSequence*" "seq")
  )
)

(define-method get_grab_keys
  (of-object "SpiceDisplay")
  (c-name "spice_display_get_grab_keys")
  (return-type "VncGrabSequence*")
)

(define-method send_keys
  (of-object "SpiceDisplay")
  (c-name "spice_display_send_keys")
  (return-type "none")
  (parameters
    '("const-guint*" "keyvals")
    '("int" "nkeyvals")
    '("SpiceDisplayKeyEvent" "kind")
  )
)



;; From spice-widget-enums.h

(define-function spice_display_key_event_get_type
  (c-name "spice_display_key_event_get_type")
  (return-type "GType")
)



;; From spice-audio.h

(define-function spice_audio_new
  (c-name "spice_audio_new")
  (is-constructor-of "SpiceAudio")
  (return-type "GObject*")
  (parameters
    '("SpiceSession*" "session")
    '("GMainLoop*" "mainloop")
    '("const-char*" "name")
  )
)



;; From vncgrabsequence.h

(define-function vnc_grab_sequence_get_type
  (c-name "vnc_grab_sequence_get_type")
  (return-type "GType")
)

(define-function vnc_grab_sequence_new
  (c-name "vnc_grab_sequence_new")
  (is-constructor-of "VncGrabSequence")
  (return-type "VncGrabSequence*")
  (parameters
    '("guint" "nkeysyms")
    '("guint*" "keysyms")
  )
)

(define-function vnc_grab_sequence_new_from_string
  (c-name "vnc_grab_sequence_new_from_string")
  (return-type "VncGrabSequence*")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method copy
  (of-object "VncGrabSequence")
  (c-name "vnc_grab_sequence_copy")
  (return-type "VncGrabSequence*")
)

(define-method free
  (of-object "VncGrabSequence")
  (c-name "vnc_grab_sequence_free")
  (return-type "none")
)

(define-method as_string
  (of-object "VncGrabSequence")
  (c-name "vnc_grab_sequence_as_string")
  (return-type "gchar*")
)



;; From spice-client.h



;; From spice-types.h



;; From spice-session.h

(define-function spice_session_get_type
  (c-name "spice_session_get_type")
  (return-type "GType")
)

(define-function spice_session_new
  (c-name "spice_session_new")
  (is-constructor-of "SpiceSession")
  (return-type "SpiceSession*")
)

(define-method connect
  (of-object "SpiceSession")
  (c-name "spice_session_connect")
  (return-type "gboolean")
)

(define-method disconnect
  (of-object "SpiceSession")
  (c-name "spice_session_disconnect")
  (return-type "none")
)

(define-method get_channels
  (of-object "SpiceSession")
  (c-name "spice_session_get_channels")
  (return-type "GList*")
)



;; From spice-channel.h

(define-function spice_channel_get_type
  (c-name "spice_channel_get_type")
  (return-type "GType")
)

(define-function spice_channel_new
  (c-name "spice_channel_new")
  (is-constructor-of "SpiceChannel")
  (return-type "SpiceChannel*")
  (parameters
    '("SpiceSession*" "s")
    '("int" "type")
    '("int" "id")
  )
)

(define-method destroy
  (of-object "SpiceChannel")
  (c-name "spice_channel_destroy")
  (return-type "none")
)

(define-method connect
  (of-object "SpiceChannel")
  (c-name "spice_channel_connect")
  (return-type "gboolean")
)

(define-method disconnect
  (of-object "SpiceChannel")
  (c-name "spice_channel_disconnect")
  (return-type "none")
  (parameters
    '("SpiceChannelEvent" "event")
  )
)



;; From spice-channel-enums.h

(define-function spice_channel_event_get_type
  (c-name "spice_channel_event_get_type")
  (return-type "GType")
)



;; From channel-main.h

(define-function spice_main_channel_get_type
  (c-name "spice_main_channel_get_type")
  (return-type "GType")
)



;; From channel-display.h

(define-function spice_display_channel_get_type
  (c-name "spice_display_channel_get_type")
  (return-type "GType")
)



;; From channel-cursor.h

(define-function spice_cursor_channel_get_type
  (c-name "spice_cursor_channel_get_type")
  (return-type "GType")
)



;; From channel-inputs.h

(define-function spice_inputs_channel_get_type
  (c-name "spice_inputs_channel_get_type")
  (return-type "GType")
)



;; From channel-playback.h

(define-function spice_playback_channel_get_type
  (c-name "spice_playback_channel_get_type")
  (return-type "GType")
)



;; From channel-record.h

(define-function spice_record_channel_get_type
  (c-name "spice_record_channel_get_type")
  (return-type "GType")
)


